AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  simple-websockets-chat-app
  SAM Template for simple-websockets-chat-app that has the DynamoDB table and Lambda
  functions needed to demonstrate the Websocket protocol on API Gateway.

Globals:
  Function:
    Timeout: 3
    MemorySize: 512
    Runtime: nodejs12.x
    Layers:
      - !Ref SimpleChatWebSocketDependencies
    Environment:
        Variables:
          NODE_PATH: /opt/node_modules/
          TABLE_NAME: !Ref TableName

Resources:
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DefaultRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  SimpleChatWebSocketDependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SimpleChatWebSocket-app-dependencies
      Description: Dependencies for sam app [temp-units-conv]
      ContentUri: _lambda-layer/
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectRouteInteg

  ConnectRouteInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Route Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectRouteFunction.Arn}/invocations
  ConnectRouteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocket-Connect-Route
      CodeUri: connect
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  ConnectRoutePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - ConnectRouteFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectRouteFunction
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectRouteInteg
  DisconnectRouteInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Route Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectRouteFunction.Arn}/invocations

  DisconnectRouteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocket-Disconnect-Route
      CodeUri: disconnect
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  DisconnectRoutePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - DisconnectRouteFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectRouteFunction
      Principal: apigateway.amazonaws.com

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultRouteInteg
  DefaultRouteInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Default Route Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultRouteFunction.Arn}/invocations

  DefaultRouteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: WebSocket-Default-Route
      CodeUri: default
      Handler: index.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  DefaultRouteFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - DefaultRouteFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultRouteFunction
      Principal: apigateway.amazonaws.com

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "socket_id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "socket_id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName

Parameters:
  TableName:
    Type: String
    Default: 'simple_chat_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'